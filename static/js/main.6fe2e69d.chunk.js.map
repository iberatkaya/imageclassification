{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["App","props","onChange","e","a","async","file","URL","createObjectURL","target","files","setState","image","state","loading","modelMobilenet","modelCocoSsd","mobilenetPred","cocossdPred","scanned","mobilenet","version","alpha","cocoSsd","this","className","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","href","role","value","accept","ref","style","maxWidth","src","map","i","parseFloat","probability","toFixed","class","score","onClick","classify","refs","predmobilenet","detect","predcocossd","console","log","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6fe2e69d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport * as mobilenet from '@tensorflow-models/mobilenet';\nimport * as cocoSsd from '@tensorflow-models/coco-ssd';\nimport './App.css';\n\n/**\n * A simple React App to test image recognition models MobileNet and COCOSSD\n *\n * @author iberatkaya\n */\n\ninterface Props {\n\n};\n\n/**\n * State of the React App\n * \n * @property {string} image The file path of the image\n * @property {boolean} loading To check if the models have loaded\n * @property {mobilenet.MobileNet} modelMobilenet The MobileNet model \n * @property {cocoSsd.DetectedObject} modelCocoSsd The COCO-SSD model\n * @property {Array<object>} mobilenetPred The predictions of the MobileNet model,\n * @property {Array<object>} cocossdPred The predictions of the COCO-SSD model,\n * @property {boolean} scanned To check if the image was scanned\n */\n\ninterface State {\n  image: string,\n  loading: boolean,\n  modelMobilenet: mobilenet.MobileNet | null,\n  modelCocoSsd: cocoSsd.ObjectDetection | null,\n  mobilenetPred: Array<object>,\n  cocossdPred: Array<object>,\n  scanned: boolean\n}\n\n\nclass App extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      image: '',\n      loading: true,\n      modelMobilenet: null,\n      modelCocoSsd: null,\n      mobilenetPred: [],\n      cocossdPred: [],\n      scanned: false\n    }\n  }\n\n  async componentDidMount() {\n    // Load the model.\n    const modelMobilenet = await mobilenet.load({ version: 1, alpha: 1 });\n    const modelCocoSsd = await cocoSsd.load();\n    this.setState({ modelMobilenet, modelCocoSsd, loading: false });\n  }\n\n\n  onChange = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    let file = URL.createObjectURL(e.target.files![0]);\n    this.setState({ image: file })\n  }\n\n\n  render() {\n    return (\n      <div>\n        <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark static-top\">\n          <div className=\"container\">\n            <a className=\"navbar-brand\">Image Class Detection</a>\n            <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarResponsive\" aria-controls=\"navbarResponsive\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n              <span className=\"navbar-toggler-icon\"></span>\n            </button>\n            <div className=\"collapse navbar-collapse\" id=\"navbarResponsive\">\n              <ul className=\"navbar-nav ml-auto\">\n                <li className=\"nav-item active\">\n                  <a className=\"nav-link\" target=\"_blank\" href=\"https://github.com/iberatkaya\">Github</a>\n                </li>\n                <li className=\"nav-item active\">\n                  <a className=\"nav-link\" target=\"_blank\" href=\"https://linkedin.com/in/ibrahim-berat-kaya/\">LinkedIn</a>\n                </li>\n                <li className=\"nav-item active\">\n                  <a className=\"nav-link\" target=\"_blank\" href=\"https://www.npmjs.com/package/@tensorflow-models/mobilenet\">MobileNet</a>\n                </li>\n                <li className=\"nav-item active\">\n                  <a className=\"nav-link\" target=\"_blank\" href=\"https://www.npmjs.com/package/@tensorflow-models/coco-ssd\">COCO-SSD</a>\n                </li>\n              </ul>\n            </div>\n          </div>\n        </nav>\n\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-lg-12 text-center\">\n              <h2 className=\"m-3\">Tenserflow.js Image Classification</h2>\n            </div>\n          </div>\n        </div>\n\n        {this.state.loading ?\n          <div className=\"container text-center\">\n            <div className=\"spinner-border text-danger mb-3\" role=\"status\">\n            </div>\n            <div className=\"lead\">Loading Models...</div>\n          </div>\n          :\n          <div>\n            {\n              this.state.image === '' ?\n                <div className=\"container justify-center align-items-center\">\n                  <div className=\"text-center\">\n                    <p className=\"lead\">Upload your image to classify it. Images are clasified with the MobileNet and COCO-SSD models.</p>\n                  </div>\n                  <form className=\"w-75 form\">\n                    <div className=\"input-group\">\n                      <div className=\"input-group-prepend\">\n                        <span className=\"input-group-text\">Upload</span>\n                      </div>\n                      <div className=\"custom-file\">\n                        <input value={this.state.image} onChange={this.onChange} accept=\"image/*\" type=\"file\" className=\"custom-file-input\" />\n                        <label className=\"custom-file-label\">Choose file</label>\n                      </div>\n                    </div>\n                  </form>\n                </div>\n                :\n\n                <div className=\"container-fluid\">\n                  <div className=\"row\">\n                    <div className=\"col-lg-12\">\n                      <div className=\"text-center\">\n                        <img ref=\"image\" style={{ maxWidth: '60%' }} className=\"img-responsive\" src={this.state.image}></img>\n                      </div>\n                      <p></p> {/* Moves button to bottom of image */}\n                      {!this.state.scanned ?\n                        <div className=\"text-center\">\n                          <button className=\"btn btn-outline-primary\" onClick={async () => {\n                            const modelMobilenet = this.state.modelMobilenet;\n                            const modelCocoSsd = this.state.modelCocoSsd;\n                            const predmobilenet = await modelMobilenet!.classify(this.refs.image as HTMLImageElement);\n                            const predcocossd = await modelCocoSsd!.detect(this.refs.image as HTMLImageElement);\n                            console.log(predmobilenet);\n                            console.log(predcocossd);\n                            this.setState({ mobilenetPred: predmobilenet, cocossdPred: predcocossd, scanned: true });\n\n                          }}>Scan</button>\n                        </div>\n                        :\n                        <div className=\"container\">\n                          <ul className=\"list-group\">\n                            <li className=\"list-group-item disabled\">MobileNet</li>\n                            {this.state.mobilenetPred.map((i: any) => {\n                              return <li className=\"list-group-item\">Prediction: {i.className} - Probability: {parseFloat(i.probability).toFixed(3)}</li>\n                            })}\n                            <li className=\"list-group-item disabled\">COCO-SSD</li>\n                            {this.state.cocossdPred.map((i: any) => {\n                              return <li className=\"list-group-item\">Prediction: {i.class} - Probability: {parseFloat(i.score).toFixed(3)}</li>\n                            })}\n                          </ul>\n                          <div className=\"text-center\">\n                            <button className=\"btn btn-outline-primary\" onClick={async () => {\n                              this.setState({image: '', mobilenetPred: [], cocossdPred: [], scanned: false})\n                            }}>Scan New Image</button>\n                          </div>\n                        </div>\n                      }\n                    </div>\n                  </div>\n                </div>\n            }\n          </div>\n        }\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}